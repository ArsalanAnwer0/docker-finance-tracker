
services:
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: finance-tracker/database:latest
    container_name: finance-db-prod
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-finance_db}
      - POSTGRES_USER=${POSTGRES_USER:-finance_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    
    volumes:
      - db_data_prod:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    networks:
      - backend-network
    
    # Resource limits for production stability
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    
    # Security hardening
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-finance_user} -d ${POSTGRES_DB:-finance_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: finance-tracker/backend:latest
    container_name: finance-backend-prod
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-finance_db}
      - DB_USER=${POSTGRES_USER:-finance_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    
    networks:
      - frontend-network
      - backend-network
    
    depends_on:
      database:
        condition: service_healthy
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: finance-tracker/frontend:latest
    container_name: finance-frontend-prod
    restart: unless-stopped
    
    ports:
      - "${FRONTEND_PORT:-80}:80"
    
    networks:
      - frontend-network
    
    depends_on:
      backend:
        condition: service_healthy
    
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# Named volumes for data persistence
volumes:
  db_data_prod:
    driver: local

# Segmented networks for security
networks:
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.2.0/24